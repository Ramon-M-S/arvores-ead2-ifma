SISTEMA DE MANIPULAÇÃO DE ÁRVORES AVL E RUBRO-NEGRA
===================================================

PROJETO ESTRUTURADO EM JAVA
Pasta base: /src

===================================================
1. OBJETIVO
===================================================
Este projeto permite executar inserções, remoções e percursos
em duas estruturas de árvore binária balanceada:

- AVL Tree      → Classe: treeAVL.RunAVL
- Red-Black Tree → Classe: treeRedBlack.RunRedBlack

O funcionamento é controlado por comandos contidos no arquivo:
> src/arvores.txt

O resultado das operações é gravado nos arquivos:
- AVL:         src/treeAVL/saidaAVL.txt
- Red-Black:   src/treeRedBlack/saidaRB.txt

===================================================
2. ESTRUTURA DE PASTAS E ARQUIVOS
===================================================

src/
│
├── arvores.txt            ← entrada de comandos
├── configArvores.txt      ← este guia de uso
│
├── utils/
│   ├── AcaoSobreNo.java   ← interface para AVL
│   ├── LeitorArquivo.java ← (opcional para leitura auxiliar)
│
├── treeAVL/
│   ├── AVLTree.java       ← implementação AVL
│   ├── NoAvl.java         ← nó AVL
│   ├── RunAVL.java        ← classe main
│   ├── saidaAVL.txt       ← saída das operações
│
├── treeRedBlack/
│   ├── RedBlackTree.java  ← implementação Red-Black
│   ├── NoRB.java          ← nó Red-Black
│   ├── Cor.java           ← enum de cor
│   ├── AcaoTexto.java     ← interface para percursos
│   ├── RunRedBlack.java   ← classe main
│   ├── saidaRB.txt        ← saída das operações

===================================================
3. COMANDOS SUPORTADOS NO `arvores.txt`
===================================================

- I-<número>
  → Insere o número na árvore
  Ex: I-20

- R-<número>
  → Remove o número da árvore
  Ex: R-10

- P1  ou  P
  → Imprime os elementos em Em-Ordem
    (esquerda → raiz → direita)

- P2
  → Imprime os elementos em Pós-Ordem
    (esquerda → direita → raiz)

- P3
  → Imprime os elementos em Pré-Ordem
    (raiz → esquerda → direita)

===================================================
4. EXEMPLO DE ENTRADA (arvores.txt)
===================================================

I-10
I-20
I-5
R-5
P1
P2
P3

===================================================
5. FORMATO DAS SAÍDAS
===================================================

▶ Para AVL (saidaAVL.txt):

P1: Valor (10) ; Valor (20) ;
P2: Valor (20) ; Valor (10) ;
P3: Valor (10) ; Valor (20) ;

▶ Para Red-Black (saidaRB.txt):

P1: Valor (10, PRETO) ; Valor (20, VERMELHO) ;
P2: Valor (20, VERMELHO) ; Valor (10, PRETO) ;
P3: Valor (10, PRETO) ; Valor (20, VERMELHO) ;

* A cor dos nós na Red-Black é mostrada após o valor.

===================================================
6. COMO EXECUTAR
===================================================

1. Edite o arquivo `src/arvores.txt` com os comandos desejados.
2. Execute `RunAVL` para testar a árvore AVL.
3. Execute `RunRedBlack` para testar a árvore Rubro-Negra.
4. Verifique a saída nos arquivos `saidaAVL.txt` ou `saidaRB.txt`.

===================================================
7. OBSERVAÇÕES
===================================================

- O sistema ignora linhas em branco automaticamente.
- Apenas inteiros são suportados como valores de entrada.
- A saída é sobrescrita a cada execução.
- Nenhuma biblioteca do pacote `java.util` é usada.

